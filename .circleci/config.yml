version: 2.1

parameters:
  elixir:
    type: string
    default: "1.13.2"
  erlang:
    type: string
    default: "24.2.1"

example_requires: &example_requires
  requires:
    # - elixir-1.12.3-otp-24.1

commands:
  background_execute:
    parameters:
      example:
        type: string
    steps:
      - run:
          name: background execute <<parameters.example>>
          command: _build/prod/rel/bakeware/<<parameters.example>> > /tmp/output
          background: true
          working_directory: examples/<<parameters.example>>

  execute_example:
    parameters:
      example:
        type: string
      commands:
        type: steps
      env_setup:
        type: steps
        default: []
      os:
        type: string
        default: alpine
    steps:
      - compile:
          working_directory: examples/<< parameters.example >>
          env_setup: << parameters.env_setup >>
          os: << parameters.os >>
      - run: mkdir ~/.cache
      - run:
          command: mix release
          working_directory: examples/<< parameters.example >>
      - steps: << parameters.commands >>
      - put_cache:
          working_directory: examples/<< parameters.example >>
          os: << parameters.os >>

  compile:
    parameters:
      working_directory:
        type: "string"
        default: "."
      env_setup:
        type: steps
        default: []
      os:
        type: string
    steps:
      - checkout
      - when:
          condition:
            equal: [alpine, << parameters.os >>]
          steps:
            - run:
                name: Install system dependencies
                command: |
                  apk update
                  apk add build-base
      - when:
          condition:
            equal: [ubuntu, << parameters.os >>]
          steps:
            - run:
                name: Install system dependencies
                command: |
                  apt-get update
                  apt install -y build-essential ca-certificates
      - when:
          condition:
            equal: [mac, <<parameters.os>>]
          steps:
            - restore_cache:
                name: Restore asdf cache
                keys:
                  - v1-asdf-v0.8.0-cache-<<parameters.os>>-erlang-<<pipeline.parameters.erlang>>-elixir-<<pipeline.parameters.elixir>>
            - run:
                name: install asdf
                command: |
                  [ -d ~/.asdf-vm ] || git clone https://github.com/asdf-vm/asdf.git ~/.asdf-vm --branch v0.8.0
                  echo 'source ~/.asdf-vm/asdf.sh' >> $BASH_ENV
                  source $BASH_ENV
            - run:
                name: setup asdf
                command: |
                  asdf plugin-list | grep erlang || asdf plugin-add erlang git@github.com:asdf-vm/asdf-erlang.git
                  asdf plugin-update erlang
                  cd ~/.asdf/plugins/erlang && git checkout HEAD && cd -

                  asdf plugin-list | grep elixir || asdf plugin-add elixir git@github.com:asdf-vm/asdf-elixir.git
                  asdf plugin-update elixir
                  cd ~/.asdf/plugins/elixir && git checkout HEAD && cd -
            - run:
                name: Prep precompiled OTP
                command: |
                  [ -d ~/.asdf/installs/erlang/23.1.5 ] && echo "precompiled OTP exists" || \
                  echo "Downloading precompiled OTP" && \
                  mkdir -p ~/.asdf/installs/erlang/ && \
                  cd ~/.asdf/installs/erlang/ && \
                  curl -LO https://github.com/wojtekmach/otp_builds/releases/download/OTP-23.1.5/OTP-23.1.5-macOS.tar.gz && \
                  tar xzf OTP-23.1.5-macOS.tar.gz && \
                  mv OTP-23.1.5 23.1.5 && \
                  cd 23.1.5 && ./Install -sasl $PWD
            - run:
                name: install Erlang
                command: |
                  asdf reshim erlang 23.1.5
                  asdf global erlang 23.1.5
            - run:
                name: install Elixir
                command: |
                  asdf install elixir <<pipeline.parameters.elixir>>
                  asdf global elixir <<pipeline.parameters.elixir>>
            - save_cache:
                name: Save asdf cache
                key: v1-asdf-v0.8.0-cache-<<parameters.os>>-erlang-23.1.5-elixir-<<pipeline.parameters.elixir>>
                paths:
                  - ~/.asdf
                  - ~/.asdf-vm
      - run:
          name: Install hex and rebar
          command: |
            mix local.hex --force
            mix local.rebar --force
      - restore_cache:
          keys:
            - v1-mix-cache-<<parameters.os>>-{{ checksum "<<parameters.working_directory>>/mix.lock" }}
      - steps: << parameters.env_setup >>
      - run:
          command: mix deps.get
          working_directory: <<parameters.working_directory>>
      - run:
          command: mix compile
          working_directory: <<parameters.working_directory>>

  put_cache:
    parameters:
      working_directory:
        type: string
        default: "."
      os:
        type: string
    steps:
      - save_cache:
          key: v1-mix-cache-<<parameters.os>>-{{ checksum "<<parameters.working_directory>>/mix.lock" }}
          paths:
            - <<parameters.working_directory>>/_build
            - <<parameters.working_directory>>/deps

  validate_output:
    parameters:
      example:
        type: string
      grep:
        type: string
    steps:
      - run:
          name: validate <<parameters.example>> output
          command: |
            check_script() { local e t=0; until grep "<<parameters.grep>>" /tmp/output; do e=$?; $((t++ > 8)) && return $e; sleep $t; done; }
            check_script
          no_output_timeout: 10s

executors:
  alpine: &alpine
    docker:
      - image: hexpm/elixir:<< pipeline.parameters.elixir >>-erlang-<< pipeline.parameters.erlang >>-alpine-3.15.0
    environment:
      LC_ALL: C.UTF-8
      SUDO: true
    working_directory: ~/repo
  mac: &mac
    macos:
      xcode: 12.2.0
    working_directory: ~/repo
  ubuntu: &ubuntu
    docker:
      - image: hexpm/elixir:1.13.2-erlang-24.2.1-ubuntu-impish-20211102
    environment:
      LC_ALL: C.UTF-8
      SUDO: true
    working_directory: ~/repo

example_env: &example_env
  parameters:
    example:
      type: string
      default: ""
    args:
      type: string
      default: ""
    os:
      type: string
      default: alpine
  executor: << parameters.os >>
  environment:
    MIX_ENV: prod

jobs:
  build:
    parameters:
      elixir:
        type: string
      erlang:
        type: string
      os:
        type: string
    executor: <<parameters.os>>
    steps:
      - compile:
          os: <<parameters.os>>
      - run: mix format --check-formatted
      - run: mix test
      - run: mix docs
      - run: mix hex.build
      - run: mix dialyzer
      - put_cache:
          os: <<parameters.os>>

  test_script:
    <<: *example_env
    steps:
      - execute_example:
          os: << parameters.os >>
          example: << parameters.example >>
          commands:
            - run:
                name: execute <<parameters.example>>
                command: _build/prod/rel/bakeware/<<parameters.example>> <<parameters.args>>
                no_output_timeout: 10s
                working_directory: examples/<< parameters.example >>

  test_iex:
    <<: *example_env
    steps:
      - execute_example:
          example: iex_prompt
          os: <<parameters.os>>
          commands:
            - background_execute:
                example: iex_prompt
            - validate_output:
                example: iex_prompt
                grep: Interactive Elixir

  test_scenic:
    <<: *example_env
    steps:
      - execute_example:
          example: scenic_app
          os: <<parameters.os>>
          env_setup:
            - when:
                condition:
                  equal: [alpine, << parameters.os >>]
                steps:
                  - run:
                      name: Install glfw
                      command: apk add glew-dev glew glfw glfw-dev pkgconfig
            - when:
                condition:
                  equal: [ubuntu, << parameters.os >>]
                steps:
                  - run:
                      name: Install glfw
                      command: apt-get install -y pkgconf libglfw3 libglfw3-dev libglew2.1 libglew-dev
          commands:
            - background_execute:
                example: scenic_app
            - validate_output:
                example: scenic_app
                grep: Starting ScenicApp

  test_phoenix:
    <<: *example_env
    steps:
      - execute_example:
          example: phoenix_app
          os: <<parameters.os>>
          env_setup:
            - when:
                condition:
                  equal: [alpine, << parameters.os >>]
                steps:
                  - run:
                      name: Install node
                      command: apk add --update nodejs npm python3 py3-pip
            - when:
                condition:
                  equal: [ubuntu, << parameters.os >>]
                steps:
                  - run:
                      name: Install node
                      command: apt install -y nodejs npm
            - run:
                command: mix setup
                working_directory: examples/phoenix_app
            - run:
                command: mix assets
                working_directory: examples/phoenix_app
          commands:
            - background_execute:
                example: phoenix_app
            - validate_output:
                example: phoenix_app
                grep: Running PhoenixAppWeb.Endpoint

workflows:
  build_test:
    jobs:
      - test_script:
          # <<: *example_requires
          name: test simple_app <<matrix.os>>
          example: simple_app
          matrix:
            parameters:
              example: simple_app
              os: [mac, alpine, ubuntu]

      - test_script:
          # <<: *example_requires
          name: test simple_script <<matrix.os>>
          matrix:
            parameters:
              example: [simple_script]
              args: [howdy! --upcase]
              os: [mac, alpine, ubuntu]

      - test_script:
          # <<: *example_requires
          name: test nif_script <<matrix.os>>
          matrix:
            parameters:
              example: [nif_script]
              args: [2 2]
              os: [alpine, mac, ubuntu]

      - test_iex:
          # <<: *example_requires
          name: test iex_prompt <<matrix.os>>
          matrix:
            parameters:
              os: [alpine, mac, ubuntu]

      - test_scenic:
          # <<: *example_requires
          name: test scenic_app <<matrix.os>>
          matrix:
            parameters:
              os: [alpine, ubuntu]

      - test_phoenix:
          # <<: *example_requires
          name: test phoenix_app <<matrix.os>>
          matrix:
            parameters:
              os: [alpine, mac, ubuntu]
